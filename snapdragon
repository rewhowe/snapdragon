#!/usr/bin/env ruby
VERSION_NOTE = %(\
  金魚草 v2.0.1
  Copyright 2020, Rew Howe
  https://github.com/rewhowe/snapdragon
).freeze

require_relative 'src/errors'
require_relative 'src/interpreter/errors'
require_relative 'src/interpreter/processor'
require_relative 'src/tokenizer/errors'
require_relative 'src/tokenizer/file_reader'
require_relative 'src/tokenizer/interactive_reader'
require_relative 'src/tokenizer/lexer'
require_relative 'src/util/i18n'
require_relative 'src/util/logger'
require_relative 'src/util/options'
require_relative 'src/util/token_printer'

options = Util::Options.parse_arguments

if options[:version]
  puts VERSION_NOTE
  exit
end

Util::I18n.setup options

Util::Logger.setup options
Util::Logger.debug(Util::Options::DEBUG_3) { options }

Errors.register_custom_errors Tokenizer::Errors
Errors.register_custom_errors Interpreter::Errors

begin
  # TODO: move reader stuff to reader module; make reader factory
  reader = case options[:input]
           when Util::Options::INPUT_FILE then Tokenizer::FileReader.new(options)
           when Util::Options::INPUT_INTERACTIVE then Tokenizer::InteractiveReader.new
           end
  lexer  = Tokenizer::Lexer.new reader, options

  if options[:tokens]
    Util::TokenPrinter.print_all lexer
    exit
  end

  processor = Interpreter::Processor.new lexer, options
  # TODO move to Util::Repl.run reader, processor
  loop do
    result = processor.execute
    exit result.result_code if result.is_a? Interpreter::ReturnValue
    reader.reopen
  end
rescue => e
  raise e if options[:debug] != Util::Options::DEBUG_OFF
  if e.is_a? Errors::BaseError
    puts e.message.red
    abort
  end
  abort Util::I18n.t 'internal_errors.unknown'
end
